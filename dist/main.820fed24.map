{"version":3,"sources":["js/main.js"],"names":["config","type","Phaser","AUTO","width","height","physics","default","arcade","gravity","y","debug","scene","key","preload","create","update","game","Game","player","cursors","text","add","sprite","setBounce","setCollideWorldBounds","input","keyboard","createCursorKeys","body","velocity","setTo","left","isDown","setVelocityX","right","space","up","onFloor","setVelocityY","load","image","progressBar","graphics","progressBox","fillStyle","fillRect","cameras","main","loadingText","make","x","style","font","fill","setOrigin","percentText","on","value","setText","parseInt","clear","destroy","i"],"mappings":"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","file":"main.820fed24.map","sourceRoot":"..","sourcesContent":["// var config = {\n//   type: Phaser.AUTO,\n//   width: 800,\n//   height: 600,\n//   physics: {\n//       default: 'arcade',\n//       arcade: {\n//           gravity: { y: 200 }\n//       }\n//   },\n//   scene: {\n//       preload: preload,\n//       create: create\n//   }\n// };\n\n// var game = new Phaser.Game(config);\n\n\n\n// // var game = new Phaser.Game(800, 600, Phaser.AUTO, '');\n// let gameScene = new Phaser.Scene('Game');\n \n// // our game's configuration\n// let config = {\n//   type: Phaser.AUTO,  //Phaser will decide how to render our game (WebGL or Canvas)\n//   width: 640, // game width\n//   height: 360, // game height\n//   scene: gameScene // our newly created scene\n// };\n \n// // create the game, and pass it the configuration\n// let game = new Phaser.Game(config);\n\n// // load asset files for our game\n// gameScene.preload = function() {\n \n//     // load images\n//     this.load.image('background', 'assets/back.png');\n//     this.load.image('player', 'assets/pers.png');\n//   };\n   \n//   // executed once, after assets were loaded\n//   gameScene.create = function() {\n   \n//      // background\n//      this.add.sprite(0, 0, 'background');\n//      this.player = this.add.sprite(40, this.sys.game.config.height/1.2, 'player');\n \n//   // scale down\n//     this.player.setScale(0.2);\n//     bg.setOrigin(0,0);\n\n//     cursors = game.input.keyboard.createCursorKeys();\n//     fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n//   }\n//   gameScene.update = function() {\n\n//     if (cursors.left.isDown)\n//         {\n//             this.player.velocity.x = -200;\n//         }\n//         else if (cursors.right.isDown)\n//         {\n//             this.player.velocity.x = 200;\n//         }\n\n//         //  Firing?\n//         if (fireButton.isDown)\n//         {\n//             fireBullet();\n//         }\n\n//         if (game.time.now > firingTimer)\n//         {\n//             enemyFires();\n//         }\n \n//     // check for active input\n//     if (this.input.activePointer.isDown) {\n \n//         // player walks\n//         this.player.x += this.playerSpeed;\n//       }\n//       let enemies = this.enemies.getChildren();\n//   let numEnemies = enemies.length;\n \n//   for (let i = 0; i < numEnemies; i++) {\n \n//     // move enemies\n//     enemies[i].y += enemies[i].speed;\n \n//     // reverse movement if reached the edges\n//     if (enemies[i].y >= this.enemyMaxY && enemies[i].speed > 0) {\n//       enemies[i].speed *= -1;\n//     } else if (enemies[i].y <= this.enemyMinY && enemies[i].speed < 0) {\n//       enemies[i].speed *= -1;\n//     }\n//   }\n//   };\n//   // some parameters for our scene (our own customer variables - these are NOT part of the Phaser API)\n// gameScene.init = function() {\n//     this.playerSpeed = 1.5;\n//     this.enemyMaxY = 280;\n//     this.enemyMinY = 80;\n//   }\n\n\n\nvar config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: {y: 1000},\n            debug: false\n        }\n    },\n    scene: {\n        key: 'main',\n        preload: preload,\n        create: create,\n        update: update\n    }\n};\n\n \nvar game = new Phaser.Game(config);\n \nvar player;\nvar cursors;\nvar text;\n \nfunction create() {\n    this.add.sprite(0, 0, 'background');\n    player = this.physics.add.sprite(400, 500, 'player'); \n    player.setBounce(0.2); // our player will bounce from items\n    player.setCollideWorldBounds(true); // don't go out of the map\n    cursors = this.input.keyboard.createCursorKeys();\n\n    // this.anims.create({\n    //     key: 'walk',\n    //     frames: this.anims.generateFrameNames('player', {prefix: 'p1_walk', start: 1, end: 11, zeroPad: 2}),\n    //     frameRate: 10,\n    //     repeat: -1\n    // });\n\n    \n}\n \nfunction update() {\n\n    player.body.velocity.setTo(0,0);\n    if (cursors.left.isDown) // if the left arrow key is down\n    {\n        player.body.setVelocityX(-200); // move left\n    }\n    else if (cursors.right.isDown) // if the right arrow key is down\n    {\n        player.body.setVelocityX(200); // move right\n    }\n    if ((cursors.space.isDown || cursors.up.isDown) && player.body.onFloor())\n    {\n        player.body.setVelocityY(-500); // jump up\n    } \n}\nfunction preload() {\n    // tiles in spritesheet\n    this.load.image('background', 'assets/back.png'); \n    \n    // player animations\n    this.load.image('player', 'assets/pers.png');\n \n\n    var progressBar = this.add.graphics();\n            var progressBox = this.add.graphics();\n            \n            progressBox.fillStyle(0x222222, 0.8);\n            progressBox.fillRect(240, 270, 320, 50);\n            \n            var width = this.cameras.main.width;\n            var height = this.cameras.main.height;\n\n            var loadingText = this.make.text({\n                x: width / 2,\n                y: height / 2 - 50,\n                text: 'Loading...',\n                style: {\n                    font: '20px monospace',\n                    fill: '#ffffff'\n                }\n            });\n            loadingText.setOrigin(0.5, 0.9);\n            \n            var percentText = this.make.text({\n                x: width / 2,\n                y: height / 2 - 5,\n                text: '0%',\n                style: {\n                    font: '18px monospace',\n                    fill: '#ffffff'\n                }\n            });\n            percentText.setOrigin(0.5, 0.5);\n            \n            this.load.on('progress', function (value) {\n                percentText.setText(parseInt(value * 100) + '%');\n                progressBar.clear();\n                progressBar.fillStyle(0xffffff, 1);\n                progressBar.fillRect(250, 280, 300 * value, 30);\n            });\n\n            this.load.on('complete', function () {\n                progressBar.destroy();\n                progressBox.destroy();\n                loadingText.destroy();\n                percentText.destroy();\n            });\n            \n            this.load.image('logo', 'logo.png');\n            for (var i = 0; i < 5000; i++) {\n                this.load.image('logo'+i, 'logo.png');\n            }\n}\n"]}